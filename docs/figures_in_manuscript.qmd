---
title: "Figures for manuscript"
author: "Lei Song"
format: html
---

```{r}
library(terra)
library(sf)
library(ggplot2)
library(cowplot)
library(ggpubr)
library(tidyterra)
library(stringr)
library(dplyr)
library(colorspace)
library(stars)
library(rnaturalearth)
library(ggfx)
library(stringr)
library(tidyverse)
library(ggsci) # for paper color palette
library(ggnewscale)
sf_use_s2(FALSE)

# Paths
agro_dir <- "data/agriculture"
lc_dir <- "data/landcover"
tdf_dir <- "data/tradeoff"

# Study area
bry <- read_sf("data/geoms/mainland_tanzania.geojson") %>% 
    select() %>% mutate(name = "Tanzania")
```

## Study area and objectives

### Figure 1

```{r}
# Habitats
## Read palette
color_table <- readLines(
    file.path(lc_dir, "lc_legend_8classes.qml"))
color_table <- color_table[str_detect(color_table, "paletteEntry")]
color_table <- do.call(rbind, lapply(color_table, function(line){
    line <- gsub("<paletteEntry ", "", line)
    items <- strsplit(line, '\" ')[[1]]
    label <- items[str_detect(items, "label")]
    label <- gsub('        label=\"','', label)
    color <- items[str_detect(items, "color")]
    color <- gsub('[^[:alnum:] ]|color','', color)
    color <- paste0("#", color)
    value <- items[str_detect(items, "value")]
    value <- as.numeric(gsub('[^[:alnum:] ]|value','', value))
    data.frame(value = value, color = color, label = label)}))
color_table$label[2] <- "Forest/dense tree"

landcover <- rast(file.path(lc_dir, "landcover_tz_1km.tif")) %>% 
    project("epsg:4326", method = "near") %>% 
    crop(bry) %>% mask(bry)
names(landcover) <- "landcover"

# Convert map to factors
cls <- data.frame(id = color_table$value, 
                  landcover = color_table$label)
levels(landcover) <- cls

coltab(landcover) <- data.frame(
    value = color_table$value, col = color_table$color)
landcover <- st_as_stars(landcover)

# Protected areas
pas <- read_sf(
    file.path("data/protected_area", "WDPA_WDOECM_Jan2023_Public_TZA",
              "WDPA_WDOECM_Jan2023_Public_TZA.gdb"),
    layer = "WDPA_WDOECM_poly_Jan2023_TZA")
pas <- pas %>% 
    select(WDPAID, NAME, DESIG) %>% 
    rename(Geometry = SHAPE) %>% 
    filter(!DESIG %in% c("Marine Reserve", "Marine Park"))
pas <- pas %>% 
    slice(unique(unlist(st_intersects(bry, pas)))) %>% 
    st_simplify()

# Make the figure
## Overview
countries <- ne_countries(
    type = 'countries', scale = 'large',
    continent = "Africa", returnclass = 'sf')
east_africa <- read_sf(file.path("data/geoms/east_africa.sqlite"))

# Make overview
overview <- ggplotGrob(ggplot() +
    with_shadow(
        geom_sf(data = countries, fill = 'lightgrey', 
                color = 'black', linewidth = 0.3),
        sigma = 1, x_offset = 10, y_offset = 10) +
    geom_sf(data = bry, fill = 'orange', 
            color = 'grey', linewidth = 0.3) +
    coord_sf(xlim = c(-17.892, 51.892), 
             ylim = c(-35.321, 37.715)) +
    theme_transparent() +
    theme(axis.title = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank(),
          panel.grid.major = element_blank(),
          plot.margin = unit(rep(-0.6, 4), "cm")))

## Main figure
ggplot() +
    geom_stars(data = landcover, na.action = na.omit, alpha = 0.9) +
    scale_fill_manual(
        "Major land cover types", values = color_table$color,
        guide = guide_legend(
            override.aes = list(linetype = "blank", 
                                shape = NA),
            nrow = 3, title.position = "top", 
            order = 1, title.hjust = 0.5)) +
    geom_sf(data = pas, aes(color = "Protected areas"), 
            fill = "transparent", linewidth = 0.4) +
    geom_sf(data = bry, aes(color = "Mainland Tanzania"), 
            fill = "transparent", linewidth = 0.6) +
    scale_color_manual(
        NULL, values = c("grey", "black"),
        breaks = c("Mainland Tanzania", 'Protected areas'),
        guide = guide_legend(order = 2)) +
    annotation_custom(grob = overview, 
                      xmin = 37.2, xmax = 40.1,
                      ymin = - 3.8, ymax = -1.4) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.title = element_text(size = 10, face = "bold"),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.4, 'cm'),
          plot.margin = unit(c(0, -2, 0, -2), "cm"),
          legend.position = "bottom",
          legend.box.just = "left",
          legend.box = "vertical")

ggsave("figures/figure1_study_area.png",
       bg = "white",
       width = 3.5, height = 4.5, dpi = 500)
```

### Figure 2

The figure 2 is drawn in drawio.

## Results
### Figure 3

```{r}
f_dir <- "results/scenarios/summary"
items <- c("Y", "B", "Ca", "Co", "D", "YD", "BCaCo", "YBCaD", "YBCaCoD")

# Load dataset
vals_cmpr <- read.csv(file.path(f_dir, "summary_scenarios_USG65_mean_sd.csv")) %>% 
    filter(scenario %in% items) %>% 
    mutate(scenario = factor(
    scenario, levels = items, labels = items)) %>% 
    filter(change == "Y100") %>% 
    select(-c(land_usage, change))
clms <- names(vals_cmpr)
clms <- clms[!str_detect(clms, "_sd")]
vals_cmpr <- vals_cmpr %>% select(all_of(clms))
names(vals_cmpr) <- c("B", "Ca", "Co", "D", "Y", "scenario")

# Figure
fig_list <- lapply(c("Y", "B", "Ca", "Co", "D"), function(item){
    # Clean data
    item_order <- c(item, setdiff(items, item))
    vals <- vals_cmpr %>% 
        select(all_of(c(item, "scenario"))) %>% 
        mutate(scenario  = factor(
            scenario, levels = item_order, labels = item_order)) %>% 
        rename(value = all_of(item)) %>% 
        mutate(group = ifelse(
            scenario == item, "Optimized", 
            ifelse(scenario %in% setdiff(c("B", "Ca", "Co", "D", "Y"), item), 
                   "Single factor", "Combined factors"))) %>% 
        mutate(group = factor(
            group, levels = c("Optimized", "Single factor", "Combined factors"),
            labels = c("Optimized", "Single factor", "Combined factors")))
    
    # Separate different conditions
    if (str_detect(item, "Y")){
        vals$value <- vals$value / 1e6
        xlab_nm <- expression(paste("New cropland (ha * ", 10^6, ")"))
    } else if (str_detect(item, "B")) {
        vals$value <- vals$value / 1e6
        xlab_nm <- expression(paste("Biodiversity loss (", 10^6, ")"))
    } else if (str_detect(item, "Ca")){
        vals$value <- vals$value / 1e8
        xlab_nm <- expression(paste("Carbon loss (tons * ", 10^8, ")"))
    } else if (str_detect(item, "Co")){
        vals$value <- vals$value / 1e5
        xlab_nm <- expression(paste("Connectivity loss (", 10^5, ")"))
    } else if (str_detect(item, "D")){
        vals$value <- vals$value / 1e8
        xlab_nm <- expression(paste("Cost distance increase (", 10^8, ")"))}
    
    # Make figure
    ggplot(data = vals) + 
        geom_segment(aes(
            y = scenario, yend = scenario, 
            x = 0, xend = value, color = group), linewidth = 0.8) +
        geom_point(aes(y = scenario, x = value, color = group), size = 2) +
        scale_color_npg(name = "Planning type") +
        theme_light() +
        theme(panel.grid.major.y = element_blank(),
              panel.border = element_blank(),
              axis.ticks.x = element_blank()) +
        ylab("") +
        xlab(xlab_nm) + theme_light() +
        theme(panel.grid.major.y = element_blank(),
              panel.border = element_blank(),
              axis.ticks.x = element_blank(),
              text = element_text(size = 10, color = "black"),
              axis.text = element_text(color = "black"),
              legend.text = element_text(size = 12, color = "black"),
              legend.title = element_text(size = 12, color = "black"),
              legend.position = "top",
              plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
})

ggarrange(plotlist = fig_list, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E"), vjust = 5,
          common.legend = TRUE, legend = "top")

ggsave("figures/figure3_factor_compare.png",
       bg = "white",
       width = 7.5, height = 4.5, dpi = 500)
```

### Figure S10

```{r}
f_dir <- "results/scenarios/summary"
items <- c("Y", "B", "Ca", "Co", "D", "YD", "BCaCo", "YBCaD", "YBCaCoD")
simu_mean <- do.call(rbind, lapply(items, function(item){
    read.csv(sprintf("%s/%s_Y100_USG65_simu_mean.csv", f_dir, item)) %>% 
        mutate(mod = item)
})) %>% mutate(mod = factor(mod, levels = items, labels = items))

prod_gain_intense <- read.csv(
    file.path("results/intensification", "prod_gain_CASS1_Y100_USG65.csv"))
pgi_mean <- mean(prod_gain_intense$Production_gain) / 1e7
pgi_sd <- sd(prod_gain_intense$Production_gain) / 1e7

fig_list <- lapply(names(simu_mean)[2:6], function(ele){
    vals <- simu_mean %>% select(all_of(c("farmable_ratio", "mod", ele)))
    names(vals)[3] <- "value"
    vals$farmable_ratio <- vals$farmable_ratio / 1e6
    
    # Separate different conditions
    if (str_detect(ele, "Production")){
        vals$value <- vals$value / 1e7 + pgi_mean
        ylab_nm <- expression(paste("Production gain (tons * ", 10^7, ")"))
    } else if (str_detect(ele, "Biodiversity")) {
        vals$value <- vals$value / 1e5
        ylab_nm <- expression(paste("Biodiversity loss (", 10^5, ")"))
    } else if (str_detect(ele, "Carbon")){
        vals$value <- vals$value / 1e7
        ylab_nm <- expression(paste("Carbon loss (tons * ", 10^7, ")"))
    } else if (str_detect(ele, "Connectivity")){
        vals$value <- vals$value / 1e5
        ylab_nm <- expression(paste("Connectivity loss (", 10^5, ")"))
    } else {
        vals$value <- vals$value / 1e8
        ylab_nm <- expression(paste("Cost distance increase (", 10^8, ")"))
    }
    
    p <- ggplot(vals, aes(x = farmable_ratio, y = value)) + 
        geom_line(aes(color = mod)) + 
        scale_color_npg(name = "Planning type")
    
    if (str_detect(ele, "Production")){
        p <- p + geom_point(aes(x = min(farmable_ratio), y = pgi_mean), size = 0.8) +
            geom_errorbar(aes(x = min(farmable_ratio), y = pgi_mean,
                              ymin = pgi_mean - pgi_sd, ymax = pgi_mean + pgi_sd), 
                          width = .2, position = position_dodge(0.05)) + 
            annotate(geom = "text", x = 0.25, hjust = 0, size = 2.1,
                     y = pgi_mean, label = "Production gain from existing cropland")
    }
    
    p + xlab(expression(paste("Expansion in cropland (ha * ", 10^6, ")"))) +
        ylab(ylab_nm) + theme_bw() +
        theme(text = element_text(size = 10),
              legend.text = element_text(size = 12),
              legend.title = element_text(size = 12),
              legend.key.height = unit(0.6, 'cm'),
              legend.key.width = unit(0.8, 'cm'),
              legend.position = "none",
              plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
})

legend <- get_legend(fig_list[[1]] + theme(legend.position = "right"))

ggarrange(fig_list[[1]], fig_list[[2]], fig_list[[3]], 
          fig_list[[4]], fig_list[[5]], legend, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E", ""))

ggsave("figures/S10_trajectories_scenarios.png",
       bg = "white",
       width = 7.4, height = 5.5, dpi = 500)
```

### Figure 4

```{r}
# Summarize the maps
fnames <- list.files(f_dir, full.names = TRUE, pattern = "Y100_USG65_simu.tif")
fnames <- fnames[-c(7, 10, 11)]
maps <- lapply(fnames, function(fname){
    rst <- rast(fname)
    rst[is.na(rst)] <- 0
    rst > 90
})

layers <- do.call(c, lapply(names(maps[[1]]), function(lyr){
    do.call(c, lapply(maps, function(x) x[lyr])) %>% sum()
})) %>% crop(bry) %>% mask(bry)
names(layers) <- names(maps[[1]])
layers[layers == 0] <- NA

# Make the figure
# Protected areas
pas <- read_sf(
    file.path("data/protected_area", "WDPA_WDOECM_Jan2023_Public_TZA",
              "WDPA_WDOECM_Jan2023_Public_TZA.gdb"),
    layer = "WDPA_WDOECM_poly_Jan2023_TZA")
pas <- pas %>% 
    select(WDPAID, NAME, DESIG) %>% 
    rename(Geometry = SHAPE) %>% 
    filter(!DESIG %in% c("Marine Reserve", "Marine Park"))
pas <- pas %>% 
    slice(unique(unlist(st_intersects(bry, pas)))) %>% 
    st_simplify()

# Overall agreement
g1 <- ggplot() +
    geom_sf(data = pas, color = "#E5F5E0", 
            fill = "#E5F5E0", linewidth = 0) +
    geom_spatraster(data = layers$farmland, na.rm = TRUE) +
    scale_fill_continuous_sequential(
        name = "Agreement level (1 - 9)", breaks = c(1, 3, 5, 7, 9),
        palette = "Plasma", na.value = NA,
        guide = guide_colourbar(
            title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, -1, 0, -1), "cm"),
          legend.position = "bottom",
          legend.box = "vertical")

# Pairwise agreement
nms <- sapply(str_split(basename(fnames), "_"), function(x) x[[1]][1])
names(maps) <- nms
pairwise_agree <- do.call(rbind, lapply(1:(length(items) - 1), function(n){
    map1 <- maps[[items[n]]]
    do.call(rbind, lapply((n + 1):length(items), function(m){
        map2 <- maps[[items[m]]]
        ovp <- map1 + map2
        ratios <- global(ovp == 2, "sum", na.rm = TRUE) / 
            global(ovp > 0, "sum", na.rm = TRUE) * 100
        ratios %>% 
            mutate(crop = c("Overall", str_to_title(row.names(.)[-1])),
                   agreement = sum, from = items[n], to = items[m]) %>% 
            select(from, to, crop, agreement)
    }))
})); row.names(pairwise_agree) <- NULL

## Figure
items <- c("Y", "B", "Ca", "Co", "D", "YD", "BCaCo", "YBCaD", "YBCaCoD")
vals <- pairwise_agree %>% filter(crop == "Overall") %>%
    mutate(from = factor(from, levels = items, labels = items),
           to = factor(to, levels = items, labels = items))

g2 <- ggplot(vals, aes(x = from, y = to, fill = agreement)) +
    geom_tile(color = "white") + coord_equal() + labs(x = "", y = "") +
    geom_text(aes(from, to, label = round(agreement, 0)), 
                  color = "white", size = 3) +
    scale_fill_continuous_sequential(limits = c(0, 80),
        name = expression("IoU (" %*% "100)"), palette = "Plasma") +
    theme_minimal() +
    theme(axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          panel.grid.major = element_blank(),
          panel.border = element_blank(),
          panel.background = element_blank(),
          axis.ticks = element_blank(),
          legend.justification = c(1, 0),
          legend.position = c(1.0, 0.1),
          legend.direction = "horizontal",
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          text = element_text(size = 10, color = "black"),
          legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          axis.text.x = element_text(angle = 45, vjust = 1, 
                                     size = 10, hjust = 1),
          axis.text.y = element_text(size = 10))+
    guides(fill = guide_colorbar(
        barwidth = 7, barheight = 0.8,
        title.position = "top", title.hjust = 0.5))

ggarrange(g1, g2, nrow = 1, ncol = 2, labels = c("A", "B"))

ggsave("figures/figure4_newland_agreement.png",
       bg = "white",
       width = 7, height = 4.2, dpi = 500)
```

### Figure S11

```{r}
fig_list <- lapply(names(layers)[-1], function(crp){
    ggplot() +
        geom_sf(data = pas, color = "#E5F5E0", 
                fill = "#E5F5E0", linewidth = 0) +
        geom_spatraster(data = layers[crp], na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Agreement level\n(1 - 9)", breaks = c(1, 3, 5, 7, 9),
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(title.position = "top", vjust = 0.5)) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 10),
              strip.text.x = element_text(size = 10),
              legend.text = element_text(size = 10),
              legend.spacing.y = unit(0.3, 'cm'),
              legend.margin = margin(rep(0.5, 4)), 
              legend.key.height = unit(0.8, 'cm'),
              legend.key.width = unit(0.6, 'cm'),
              plot.margin = unit(c(0, -0.3, 0, -0.3), "cm"),
              legend.position = "none")
})

legend_lc <- get_legend(fig_list[[1]] + theme(legend.position = "right"))

ggarrange(fig_list[[1]], fig_list[[2]], fig_list[[3]], 
          fig_list[[4]], fig_list[[5]], legend_lc, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E", ""))

ggsave("figures/S11_agreement_crops.png",
       bg = "white",
       width = 7.5, height = 6, dpi = 500)
```

### Figure S12

```{r}
items <- c("Y", "B", "Ca", "Co", "D", "YD", "BCaCo", "YBCaD", "YBCaCoD")
fig_list <- lapply(c("Maize", "Paddy", "Sorghum", "Cassava", "Beans"), 
                   function(crp){
    vals <- pairwise_agree %>% filter(crop == crp) %>%
        mutate(from = factor(from, levels = items, labels = items),
               to = factor(to, levels = items, labels = items))
    
    ggplot(vals, aes(x = from, y = to, fill = agreement)) +
        geom_tile(color = "white") + coord_equal() + labs(x = "", y = "") +
        geom_text(aes(from, to, label = round(agreement, 0)), 
                  color = "white", size = 3) +
        scale_fill_continuous_sequential(limits = c(0, 80),
            name = expression("IoU (" %*% "100)"), palette = "Plasma") +
        theme_minimal() +
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank(),
              panel.grid.major = element_blank(),
              panel.border = element_blank(),
              panel.background = element_blank(),
              axis.ticks = element_blank(),
              legend.justification = c(1, 0),
              legend.position = c(1.0, 0.1),
              legend.direction = "horizontal",
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(rep(0, 4)), 
              text = element_text(size = 9, color = "black"),
              legend.text = element_text(size = 9),
              legend.title = element_text(size = 9),
              axis.text.x = element_text(angle = 45, vjust = 1, 
                                         size = 9, hjust = 1),
              axis.text.y = element_text(size = 9))+
        guides(fill = guide_colorbar(
            barwidth = 4, barheight = 0.5,
            title.position = "top", title.hjust = 0.5))
})

ggarrange(plotlist = fig_list, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E"))

ggsave("figures/S12_pairwise_crops.png",
       bg = "white",
       width = 7.5, height = 5, dpi = 500)
```

### Figure 5

To show the significance of productivity growth on existing cropland.

```{r}
fnames <- list.files("results/intensification", full.names = TRUE)
vals <- do.call(rbind, lapply(fnames, function(fname){
    params <- as.numeric(str_extract_all(fname, "[0-9]+")[[1]])
    vals <- read.csv(fname) %>% pull(Production_gain)
    data.frame(cassava = params[1], yield = params[2], 
               land_usage = params[3], mean = mean(vals),
               sd = sd(vals))
}))

# Figure for cassava increase
g1 <- ggplot(data = vals %>% filter(yield == 100),
       aes(y = mean/1e7, x=cassava, color = factor(land_usage))) +
    geom_hline(yintercept = 12572439/1e7, linetype = "dashed", color = "grey") + 
    geom_point() + geom_line() + ylim(0, max(vals$mean)/1e7) +
    annotate(geom = "text", x = 3, size = 2.5,
                     y = 12002439/1e7, label = "Double the current production") +
    scale_color_npg(name = "Land usage (%)") + 
    geom_errorbar(aes(ymin = (mean - sd)/1e7, ymax = (mean + sd)/1e7), width=.1) +
    xlab("Increase in cassava planted area (#fold)") +
    ylab(expression(paste("Production growth (", 10^7, "tons)"))) +
    theme_classic()+
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.3, 'cm'),
          legend.margin = margin(rep(0, 4)),
          legend.box.margin = margin(rep(0.4, 4)),
          legend.position = "top",
          plot.margin = unit(rep(0.1, 4), "cm"))

g2 <- ggplot(data = vals %>% filter(cassava == 1) %>% filter(yield < 150),
       aes(y = mean/1e7, x=yield, color = factor(land_usage))) +
    geom_hline(yintercept = 12572439/1e7, linetype = "dashed", color = "grey") + 
    geom_point() + geom_line() + ylim(0, max(vals$mean)/1e7) +
    annotate(geom = "text", x = 120, size = 2.5,
                     y = 12002439/1e7, label = "Double the current production") +
    scale_color_npg(name = "Land usage (%)") +
    geom_errorbar(aes(ymin = (mean - sd)/1e7, ymax = (mean + sd)/1e7), width=.1) +
    xlab("Increase in attainable yield (%)") +
    ylab(expression(paste("Production growth (", 10^7, "tons)"))) +
    theme_classic()+
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.3, 'cm'),
          legend.margin = margin(rep(0, 4)),
          legend.box.margin = margin(rep(0.4, 4)),
          legend.position = "top",
          plot.margin = unit(rep(0.1, 4), "cm"))

ggarrange(g1, g2, nrow = 1, ncol = 2,
          labels = c("A", "B"), legend = "top",
          common.legend = TRUE)

ggsave("figures/figure5_prod_growth.png",
       bg = "white",
       width = 6, height = 3, dpi = 500)
```

### Figure 6

Compare the hybrid mode for different scenarios: baseline (Y100, CASS1), yield gap close further (Y140), and growing more high-yield crop (CASS3).

```{r}
# Summarize the maps
fnames <- list.files(
    "results/scenarios/summary", 
    full.names = TRUE, pattern = "^YBCaCoD.+.tif")
fnames <- c(fnames, list.files(
    "results/USG80/summary", 
    full.names = TRUE, pattern = "^YBCaCoD.+.tif"))
maps <- lapply(fnames, function(fname){
    rst <- rast(fname)
    rst[is.na(rst)] <- 0
    rst > 90
})

# Make the figure
# Protected areas
pas <- read_sf(
    file.path("data/protected_area", "WDPA_WDOECM_Jan2023_Public_TZA",
              "WDPA_WDOECM_Jan2023_Public_TZA.gdb"),
    layer = "WDPA_WDOECM_poly_Jan2023_TZA")
pas <- pas %>% 
    select(WDPAID, NAME, DESIG) %>% 
    rename(Geometry = SHAPE) %>% 
    filter(!DESIG %in% c("Marine Reserve", "Marine Park"))
pas <- pas %>% 
    slice(unique(unlist(st_intersects(bry, pas)))) %>% 
    st_simplify()

# Spatial land allocation for each crop
practices <- str_extract(fnames, "Y100|CASS3|Y140")
usages <- str_extract(fnames, "USG65|USG80")
crop_cols <- c(
    "#BF812D", "#543005",  "#e9a3c9", "#c51b7d", "#fdae6b", 
    "#e6550d", "#9ecae1", "#3182bd",  "#bcbddc", "#756bb1")

fig_list <- lapply(c("Y100", "CASS3", "Y140"), function(practice){
    map_65 <- maps[[c(1:6)[practices == practice & usages == "USG65"]]]
    map_80 <- maps[[c(1:6)[practices == practice & usages == "USG80"]]]
    map <- (map_65 + map_80) %>% crop(bry) %>% mask(bry)
    map[map == 0] <- NA
    
    # Put them together into the same layer
    map <- sum(map[[2]], (map[[3]] + 2), (map[[4]] + 4), (map[[5]] + 6), 
        (map[[6]] + 8), na.rm = TRUE)
    
    # Set to categorical
    map <- as.factor(map)
    levels(map) <- data.frame(
        value = 1:10, 
        usage = as.vector(
            sapply(c("Maize", "Paddy rice", "Sorghum", 
                     "Cassava", "Common beans"), 
                   function(x) sprintf("%s_%s", x, c("65", "80")))))
    
    # Get sub_map
    sub_ply <- ext(c(xmin = 33.4, xmax = 34.2, 
                     ymin = -3.2, ymax = -2.4)) %>% 
        vect(crs = "EPSG:4326") %>% st_as_sf(crs = 4326) %>% 
        st_centroid() %>% st_buffer(0.4)
    sub_map <- crop(map, sub_ply) %>% mask(sub_ply)
    cols_sub <- crop_cols[freq(sub_map)[["value"]] %in% freq(map)[["value"]]]
    zoomin <- ggplotGrob(
        ggplot() +
            geom_spatraster(data = sub_map, na.rm = TRUE) +
            scale_fill_manual(
                values = cols_sub,
                na.translate = FALSE) +
            geom_sf(data = sub_ply, color = "black", 
                fill = "transparent", linewidth = 0.6) +
            coord_sf() + theme_void() +
            theme(text = element_text(size = 10),
                  legend.text = element_text(size = 10),
                  legend.spacing.y = unit(0.1, 'cm'),
                  legend.margin = margin(rep(0, 4)),
                  legend.key.height = unit(0.4, 'cm'),
                  legend.key.width = unit(0.8, 'cm'),
                  plot.margin = unit(c(0, -1, 0, -1), "cm"),
                  legend.position = "none"))

    # Figure
    ggplot() +
        geom_spatraster(data = map, na.rm = TRUE) +
        scale_fill_manual(
            values = crop_cols,
            na.translate = FALSE) +
        geom_sf(data = pas, color = "#f0f0f0", 
                fill = "#f0f0f0", linewidth = 0) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        geom_sf(data = sub_ply, color = "black", 
                fill = "transparent", linewidth = 0.4) +
        annotation_custom(grob = zoomin,
                      xmin = 29.9, xmax = 33.1,
                      ymin = - 12.1, ymax = - 8.9) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, -1, 0, -1), "cm"),
          legend.position = "none")
})

# Make legend
dat <- data.frame(
    rst = c("Maize", "Maize2", "Paddy rice", "Paddy rice2", 
            "Sorghum", "Sorghum2", "Cassava", "Cassava2", 
            "Common beans", "Common beans2"), 
    x = 1:10, y = 1:10) %>% 
    mutate(rst = factor(
        rst, levels = c("Maize", "Maize2", "Paddy rice", "Paddy rice2", 
                        "Sorghum", "Sorghum2", "Cassava", "Cassava2", 
                        "Common beans", "Common beans2"),
        labels = c("Maize", "Maize2", "Paddy rice", "Paddy rice2", 
                   "Sorghum", "Sorghum2", "Cassava", "Cassava2", 
                   "Common beans", "Common beans2")))
dat2 <- data.frame(x = 1:2, y = 1:2, z = c("65", "80")) %>% 
    mutate(z = factor(z, levels = c("65", "80"), labels = c("65", "80")))
legend <-  ggplot() + 
    geom_raster(data = dat,  aes(x = x, y = y, fill = rst)) +
    scale_fill_manual('Suggested crop',
                      values = crop_cols,
                      labels = c("Maize", "", "Paddy rice", "", "Sorghum", "", 
                                 "Cassava", "", "Common beans", ""),
                      guide = guide_legend(title.position = "top", 
                                           title.hjust = 0.5)) +
    new_scale_fill() +
    geom_raster(data = dat2, aes(x = x, y = y, fill = z)) +
    scale_fill_manual('Land usage (%)',
                      values = c("grey", "Black"), labels = c("65", "80"),
                      )+
    theme(legend.text = element_text(size = 10),
          legend.position = "top", legend.direction = "horizontal")+
    guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
legend_lc <- get_legend(legend)

g1 <- ggarrange(legend_lc, ggarrange(plotlist = fig_list, nrow = 1, ncol = 3,
          labels = c("A", "B", "C")), 
          nrow = 2, ncol = 1, heights = c(3, 10))

# New area and ecological costs change
vals_65 <- read.csv(
    file.path("results/scenarios/summary", 
              "summary_scenarios_USG65_mean_sd.csv")) %>% 
    filter(scenario == "YBCaCoD") %>% 
    select(-scenario)
clms <- names(vals_65)
clms <- clms[!str_detect(clms, "_sd")]
vals_65 <- vals_65 %>% select(all_of(clms))
names(vals_65) <- c("B", "Ca", "Co", "D", "Y", "USG", "Practice")

vals_80 <- read.csv(
    file.path("results/USG80/summary", 
              "summary_scenarios_USG80_mean_sd.csv")) %>% 
    filter(scenario == "YBCaCoD") %>% 
    select(-scenario)
clms <- names(vals_80)
clms <- clms[!str_detect(clms, "_sd")]
vals_80 <- vals_80 %>% select(all_of(clms))
names(vals_80) <- c("B", "Ca", "Co", "D", "Y", "USG", "Practice")

vals <- vals_65 %>% pivot_longer(
    c("B", "Ca", "Co", "D", "Y"), names_to = "Element") %>% 
    rbind(vals_80 %>% pivot_longer(
        c("B", "Ca", "Co", "D", "Y"), names_to = "Element"))
vals <- vals %>% group_by(Element) %>% 
    reframe(USG = USG, Practice = Practice,
        value = value / max(value) * 100) %>% 
    mutate(USG = factor(USG, labels = c("65", "80"), levels = c(65, 80))) %>% 
    mutate(Practice = factor(Practice, labels = c("A", "B", "C"),
                             levels = c("Y100", "CASS3", "Y140"))) %>% 
    mutate(Element = factor(
        Element, levels = c("Y", "B", "Ca", "Co", "D"),
        labels = c("New cropland area", "Biodiveristy loss", "Carbon loss",
                   "Connectivity loss", "Cost distance increase")))
vals <- vals %>% mutate(group = ifelse(USG == 65 & Practice == "A", "B", "P"))

g2 <- ggplot(data = vals) + 
    geom_linerange(aes(
        x = Practice, ymin = 0, ymax = value, linetype = USG, color = group), 
        linewidth = 0.6, position = position_dodge2(width = 0.5)) +
    geom_point(aes(x = Practice, y = value, color = group), size = 1,
               position = position_dodge2(width = 0.5)) +
    scale_color_manual(values = c("#d73027", "black")) +
    xlab("") + ylab("Percentage") + labs(linetype = "Land usage (%)") +
    facet_grid(~Element) +
    theme_light() +
    theme(panel.grid.major.x = element_blank(),
          panel.border = element_blank(),
          strip.text.x = element_text(size = 9, color = "black"),
          axis.ticks.x = element_blank(),
          text = element_text(size = 10, color = "black"),
          axis.title = element_text(color = "black", size = 10),
          axis.text = element_text(color = "black", size = 10),
          legend.text = element_text(size = 10, color = "black"),
          legend.title = element_text(size = 10, color = "black"),
          legend.position = "top",
          plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm")) +
    guides(color = "none")

ggarrange(g1, g2, nrow = 2, ncol = 1, heights = c(6, 5))

ggsave("figures/figure7_compare.png",
       bg = "white",
       width = 7.4, height = 5.6, dpi = 500)
```

### Figure 7

```{r}
fnames <- list.files("results/intensification", full.names = TRUE)
vals <- do.call(rbind, lapply(fnames, function(fname){
    params <- as.numeric(str_extract_all(fname, "[0-9]+")[[1]])
    vals <- read.csv(fname) %>% pull(Production_gain)
    data.frame(cassava = params[1], yield = params[2], 
               land_usage = params[3], mean = mean(vals),
               sd = sd(vals))
}))


fnames <- list.files("results/expansion", full.names = TRUE)
vals_future <- do.call(rbind, lapply(fnames, function(fname){
    params <- as.numeric(str_extract_all(fname, "[0-9]+")[[1]])
    vals <- read.csv(fname) %>% pull(Attainable_production)
    data.frame(cassava = params[1], yield = params[2], 
               land_usage = params[3], mean = mean(vals),
               sd = sd(vals))
}))

vals <- left_join(vals, vals_future, by = c("cassava", "yield", "land_usage")) %>% 
    mutate(sum = mean.x + mean.y) %>% 
    select(cassava, yield, land_usage, sum) %>% 
    filter(yield != 150) %>% 
    mutate(sum = (sum / 12572439) + 1) %>% 
    mutate(cassava = factor(cassava),
           land_usage = factor(land_usage),
           yield = factor(yield))


ggplot() + geom_point(data = vals %>% filter(yield == 100),
                    aes(x = land_usage, y = sum, fill = cassava),
                    shape = 21, size = 1.6) +
    scale_fill_brewer("Increased planted area \nof cassava (times)", 
        palette="RdPu",
        guide = guide_legend(title.position="top", title.hjust = 0.5)) +
    new_scale_fill() +
    geom_point(data = vals %>% filter(cassava == 1),
             aes(x = land_usage, y = sum, fill = yield), 
             shape = 23, size = 1.6,
             position = position_nudge(x = 0.2)) +
    scale_fill_brewer("Increased attainable yield (%)",
        palette="PuBu",
        guide = guide_legend(title.position="top", title.hjust = 0.5)) +
    xlab("Land usage (%)") + ylab("Multiples of current crop production") +
    theme_classic() +
    theme(panel.grid.major.y = element_line(
        color = "lightgrey", linetype = "dashed"),
          panel.border = element_blank(),
          axis.title = element_text(size = 10, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          legend.margin = margin(rep(0, 4)),
          legend.spacing.y = unit(0, 'cm'),
          legend.box.margin = margin(rep(0, 4)),
          legend.position = "top",
          legend.box.just = "center",
          legend.box="vertical",
          plot.margin = unit(rep(0, 4), "cm"))

ggsave("figures/figure6_prod_potential.png",
       bg = "white",
       width = 3, height = 5, dpi = 500)
```

## Agricultural yield

### Figure S1

In script `11_1_downscale_yield.R`.

### Figure S2

In script `11_2_calibrate_yield.R`.

### Figure S3

Down-scaled and calibrated current yield map of maize (A), rice (B), sorghum (C), cassava (D), and beans (E) at 1 km.

```{r}
fname <- file.path(agro_dir, "yield_calibrated_5crops_tz_1km.tif")
yields_calib <- rast(fname)

org_yields <- rast(file.path(agro_dir, "yields_10km.tif"))
names(org_yields) <- names(yields_calib)

fig_list <- lapply(names(yields_calib), function(nm){
    org_yield <- org_yields[[nm]]
    yield_calib <- yields_calib[[nm]]
    
    org_figure <- ggplot() +
        geom_spatraster(data = org_yield, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Yield (t/ha)",
            palette = "Plasma", na.value = NA) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.4) +
        coord_sf() + theme_void() +
        theme(legend.position = "null")
    
    org_figure <- ggplotGrob(org_figure)
    
    ggplot() +
        geom_spatraster(data = yield_calib, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Yield (t/ha)",
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        annotation_custom(grob = org_figure, 
                      xmin = 37.2, xmax = 40.6,
                      ymin = - 4.0, ymax = -0.8) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              strip.text.x = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(rep(0, 4)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.8, 'cm'),
              plot.margin = unit(c(0, 0, 0, 0), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")
})
ggarrange(plotlist = fig_list, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E"))

ggsave("figures/S3_current_yields.png",
       bg = "white",
       width = 7.5, height = 5.5, dpi = 500)
```

### Table S1

```{r}
crops <- c("MAIZ", "RICE", "SORG", "CASS", "BEAN")
var_summary <- lapply(crops, function(crp){
    load(file.path(agro_dir, sprintf("qrf_%s.rda", crp)))
    variables <- rf_model$forest$independent.variable.names
    
    # Group the variables
    temperature <- variables[str_detect(variables, "tmean|tmax|tmin|gdd|srad[0-9]+")]
    temperature <- gsub("tm", "TM", temperature)
    temperature <- gsub("gdd", "GDD", temperature)
    temperature <- gsub("srad", "Srad", temperature)
    precipitation <- variables[str_detect(variables, "prec|vapr|et[0-9]+")]
    precipitation <- gsub("et", "ET", precipitation)
    precipitation <- gsub("prec", "Prec", precipitation)
    precipitation <- gsub("vapr", "Vapr", precipitation)
    soil <- variables[str_detect(variables, "_mean")]
    soil <- gsub("_mean", "", soil)
    soil <- gsub("\\.", "-", soil)
    
    # Add them together to a table
    ## temp
    temperature <- sapply(c("TMean", "TMax", "TMin", "GDD", "Srad"), function(item){
        item_list <- temperature[grep(item, temperature)]
        paste(item_list, collapse = ", ")
    }) %>% data.frame(Selected = .) %>% mutate(Group = row.names(.)) %>% 
        mutate(Element = "Temperature")
    
    ## prec
    precipitation <- sapply(c("ET", "Prec", "Vapr"), function(item){
        item_list <- precipitation[grep(item, precipitation)]
        paste(item_list, collapse = ", ")
    }) %>% data.frame(Selected = .) %>% mutate(Group = row.names(.)) %>% 
        mutate(Element = "Precipitation")
    
    ## soil
    soil <- sapply(c("bdod", "cec", "cfvo", "clay", 
                     "nitrogen", "phh2o", "sand", "silt", "soc"), function(item){
        item_list <- soil[grep(item, soil)]
        paste(item_list, collapse = ", ")
    }) %>% data.frame(Selected = .) %>% mutate(Group = row.names(.)) %>% 
        mutate(Element = "Soil")
    
    tb <- rbind(temperature, precipitation, soil) %>%
        select(Element, Group, Selected)
    names(tb)[3] <- crp
    tb
})

var_summary <- Reduce(full_join, var_summary)
write.csv(var_summary, "figures/table_s1_selected_vars.csv", row.names = FALSE)
```

### Figure S4

Attainable yield (best match quantile of crop yield downscaling model with FAO projections) map at 1 km.

```{r}
fname <- file.path(agro_dir, "yield_attainable_5crops_tz_1km.tif")
yields_atn <- rast(fname)

fig_list <- lapply(names(yields_atn), function(nm){
    yield_atn <- yields_atn[[nm]]
    
    ggplot() +
        geom_spatraster(data = yield_atn, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Yield (t/ha)",
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              strip.text.x = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(rep(0, 4)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.8, 'cm'),
              plot.margin = unit(c(0, 0, 0, 0), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")
})
ggarrange(plotlist = fig_list, nrow = 2, ncol = 3,
          labels = c("A", "B", "C", "D", "E"))

ggsave("figures/S4_attainable_yields.png",
       bg = "white",
       width = 7.5, height = 5.5, dpi = 500)
```

## Refine species habitat type map and range map

### Figure S5

Habitat type map of Tanzania before and after refining.

```{r}
hbt_dir <- "data/habitats"
habitat_lv2 <- rast(file.path(hbt_dir, "habitat_tz_lvl2.tif"))
habitat_refined <- rast(file.path(hbt_dir, "habitat_tz_refined_final.tif"))

# Plot
clr <- read.delim2(file.path(hbt_dir, "styles/level2.clr"), header = FALSE)[[1]]
clr <- do.call(rbind, lapply(clr, function(r){
    nums <- as.integer(str_extract_all(r, "[0-9]+ ")[[1]])[1:5]
    nm <- gsub(paste(nums, collapse = " "), "", r)
    nm <- gsub("^ ", "", nm)
    
    matrix(c(nums[1:4], nm), nrow = 1, ncol = 5)
}))

levels(habitat_lv2) <- levels(habitat_refined) <- 
    data.frame(value = as.integer(clr[, 1]), landcover = clr[, 5])
coltab(habitat_lv2) <- coltab(habitat_refined) <- 
    data.frame(value = as.integer(clr[, 1]), red = as.integer(clr[, 2]), 
               blue = as.integer(clr[, 3]), green = as.integer(clr[, 4]))

# Plot
cols <- coltab(habitat_lv2)[[1]]
cols <- sapply(1:nrow(cols), function(i){
    rgb(cols[i, 2:4], maxColorValue = 255)})

# Can't believe I have to rely on base R plot for efficient plotting in 2023.
p1 <- function() {
    par(mar = rep(0, 4))
    plot(habitat_lv2, axes = FALSE, box = FALSE, legend = FALSE)}
p2 <- function() {
    par(mar = rep(0, 4))
    plot(habitat_refined, axes = FALSE, box = FALSE, legend = FALSE)}

legend_lc <- ggplot() + 
    geom_raster(
        data = data.frame(rst = as.factor(coltab(habitat_lv2)[[1]][, 1]),
                          x = 1:length(cols),
                          y = 1:length(cols)), 
        aes(x = x, y = y, 
            fill = rst)) +
    scale_fill_manual('',
                      values = cols, 
                      breaks = coltab(habitat_lv2)[[1]][, 1],
                      labels = clr[, 5]) +
    theme(legend.position = 'bottom',
          text = element_text(size = 8),
          legend.text = element_text(size = 8))+
    guides(fill = guide_legend(ncol = 2))
legend_lc <- get_legend(legend_lc)

ggarrange(NULL, ggarrange(ggdraw(p1), ggdraw(p2), nrow = 1, ncol = 2,
          labels = c("A", "B"), vjust=6), NULL, legend_lc, NULL, nrow = 5, 
          heights = c(-0.4, 4, 2.5, 0.5, 3))

ggsave("figures/S5_habitat_type.png",
       bg = "white",
       width = 8, height = 11.2, dpi = 500)
```

## Biodiversity index

### Table S2

Information of species to calculate biodiversity.

```{r}
bio_dir <- "data/biodiversity"
species_info <- read.csv(file.path(bio_dir, "species_info.csv")) %>% 
    filter(tanzania_range_size > 0)

# Numbers
species_info %>% group_by(taxon) %>% summarise(n = n())

# Endemic species numbers
species_info %>% filter(outside_range_size == 0) %>% 
    group_by(taxon) %>% summarise(n = n())

# Get median values
species_info %>% group_by(taxon) %>% 
    summarise(median = median(refined_range_size))

species_info %>% group_by(taxon) %>% 
    summarise(median = median(range_size))
```

### Figure S6

```{r}
bhi_msa_bii <- rast(file.path(bio_dir, "bhi_msa_bii.tif"))
bhi_msa_bii <- mask(bhi_msa_bii, bry)

fig_list <- lapply(names(bhi_msa_bii), function(nm){
    lyr <- bhi_msa_bii[[nm]]
    
    ggplot() +
    geom_spatraster(data = lyr, na.rm = TRUE) +
    scale_fill_continuous_sequential(
        name = "Value (0-1)",
        palette = "Plasma", na.value = NA,
        guide = guide_colourbar(
            title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 12),
          strip.text.x = element_text(size = 12),
          plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
          legend.text = element_text(size = 12),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, 0, 0, 0), "cm"),
          legend.position = "bottom",
          legend.box = "vertical")
})

ggarrange(plotlist = fig_list, nrow = 1, ncol = 3,
          labels = c("A", "B", "C"))

ggsave("figures/S6_ecological_index.png",
       bg = "white",
       width = 7, height = 3, dpi = 500)
```

### Figure S7

Weighted species richness and rarity-weighted species richness.

```{r}
# Only use weighted
fnames <- list.files(bio_dir, pattern = "*weighted*", full.names = TRUE)

# Calculate species component
normalize <- function(x, robust = TRUE) {
    if (robust) {
        stretch(x, minv = 0, maxv = 1, minq = 0.01, maxq = 0.99)
    } else {
        (x - minmax(x)[1]) / (minmax(x)[2] - minmax(x)[1])
    }
}

# Richness
richness_fns <- fnames[!grepl("rarity", fnames)]
richness_layers <- do.call(
    c, lapply(richness_fns, function(fn){
        normalize(rast(fn) %>% mask(bry))}))
names(richness_layers) <- c("Amphibians", "Birds", "Mammals", "Reptiles")
richness <- richness_layers %>% mean() %>% normalize(FALSE)

endemism_fns <- fnames[grepl("rarity", fnames)]
# Use robust scaling to avoid the impacts of outliers
endemism_layers <- do.call(
    c, lapply(endemism_fns, function(fn){
        normalize(sqrt(sqrt(rast(fn) %>% mask(bry))))}))
names(endemism_layers) <- c("Amphibians", "Birds", "Mammals", "Reptiles")
endemism <- endemism_layers %>% mean() %>% normalize(FALSE)

## Plot
p1 <- ggplot() +
    geom_spatraster(data = richness, na.rm = TRUE) +
    scale_fill_continuous_sequential(
        name = "Normalized value (0-1)",
        palette = "Plasma", na.value = NA,
        guide = guide_colourbar(
            title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 12),
          strip.text.x = element_text(size = 12),
          legend.text = element_text(size = 12),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, 0, 0, 0), "cm"),
          legend.position = "bottom",
          legend.box = "vertical")

fig_list <- lapply(c("Mammals", "Birds", "Amphibians", "Reptiles"),
                   function(nm){
    richness_layer <- richness_layers[[nm]]
    
    ggplot() +
        geom_spatraster(data = richness_layer, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Normalized value (0-1)",
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        ggtitle(nm) + 
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              plot.title = element_text(hjust = 0.5, face = "bold"),
              plot.margin = unit(c(0, 0, 0, 0), "cm"),
              legend.position = "none")
})
p2 <- ggarrange(plotlist = fig_list, nrow = 2, ncol = 2)

p3 <- ggplot() +
    geom_spatraster(data = endemism, na.rm = TRUE) +
    scale_fill_continuous_sequential(
        name = "Normalized value (0-1)",
        palette = "Plasma", na.value = NA,
        guide = guide_colourbar(
            title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 12),
          strip.text.x = element_text(size = 12),
          legend.text = element_text(size = 12),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, 0, 0, 0), "cm"),
          legend.position = "bottom",
          legend.box = "vertical")

fig_list <- lapply(c("Mammals", "Birds", "Amphibians", "Reptiles"),
                   function(nm){
    endemism_layer <- endemism_layers[[nm]]
    
    ggplot() +
        geom_spatraster(data = endemism_layer, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = "Normalized value (0-1)",
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        ggtitle(nm) + 
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              plot.title = element_text(hjust = 0.5, face = "bold"),
              plot.margin = unit(c(0, 0, 0, 0), "cm"),
              legend.position = "none")
})
p4 <- ggarrange(plotlist = fig_list, nrow = 2, ncol = 2)

g1 <- ggarrange(p1 + theme(legend.position = "none"), p2, nrow = 1, ncol = 2) +
    theme(panel.background = element_rect(fill = "lightgrey", color = "lightgrey"))

g2 <- ggarrange(p3 + theme(legend.position = "none"), p4, nrow = 1, ncol = 2)

ggarrange(g1, g2, get_legend(p1), nrow = 3, ncol = 1,
          labels = c("A", "B", ""), heights = c(1, 1, 0.15))

ggsave("figures/S7_species_richness.png",
       bg = "white",
       width = 7.5, height = 7.6, dpi = 500)
```

## Landscape connectivity

### Table S3

Selected species to estimate landscape connectivity. This is not the table itself, but get all necessary elements to generate Table S2.

```{r}
conn_dir <- "data/connectivity"
selected_species <- read.csv(file.path(conn_dir, "select_species.csv"))
sdm_eval <- read.csv(file.path(conn_dir, "multi_species_sdm_eval.csv"))
tb <- full_join(selected_species, sdm_eval, by = c("sci_name" = "species")) %>% 
    select(sci_name, category, pup_trend, KAPPA, TSS, ROC)

vars <- rast(file.path(conn_dir, "variables/variables.tif")) %>% names()
```

### Figure S8

```{r}
suitability <- rast(file.path(conn_dir, "circuit/suitability.asc"))
pas <- read_sf(file.path(conn_dir, "circuit/pas_selected.geojson")) %>% select()

ggplot() +
    geom_spatraster(data = suitability, na.rm = TRUE) +
    scale_fill_continuous_sequential(
            name = "Suitability (0-1)",
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = pas, color = "white", show.legend = FALSE,
            fill = "transparent", linewidth = 0.4) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(-1, -0.5, 0, -0.5), "cm"),
          legend.position = "bottom",
          legend.box.just = "left",
          legend.box = "vertical")

ggsave("figures/S8_species_suitability.png",
       bg = "white", width = 3.5, height = 4.2, dpi = 500)
```

## Carbon
### Figure S9

```{r}
carbon_dir <- "data/carbon"
abv_bms <- rast(file.path(carbon_dir, "aboveground_biomass.tif"))
blw_bms <- rast(file.path(carbon_dir, "belowground_biomass.tif"))
soct_1m <- rast(file.path(carbon_dir, "ocs_1m_sg.tif")) %>% 
    resample(abv_bms)

carbons <- c(abv_bms, blw_bms, soct_1m)
names(carbons) <- c("Aboveground biomass", "Belowground biomass", 
                    "Soil carbon stocks")
carbons <- mask(carbons, bry)

fig_list <- lapply(names(carbons), function(nm){
    lyr <- carbons[[nm]]
    
    ggplot() +
    geom_spatraster(data = lyr, na.rm = TRUE) +
    scale_fill_continuous_sequential(
        name = "Carbon density (t/ha)",
        palette = "Plasma", na.value = NA,
        guide = guide_colourbar(
            title.position = "top", title.hjust = 0.5)) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 12),
          strip.text.x = element_text(size = 12),
          plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
          legend.text = element_text(size = 12),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.8, 'cm'),
          plot.margin = unit(c(0, 0, 0, 0), "cm"),
          legend.position = "bottom",
          legend.box = "vertical")
})

ggarrange(plotlist = fig_list, nrow = 1, ncol = 3,
          labels = c("A", "B", "C"))

ggsave("figures/S9_carbons.png",
       bg = "white",
       width = 7, height = 3, dpi = 500)
```

