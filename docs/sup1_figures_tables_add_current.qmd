---
title: "Figures in the manuscript"
author: "Lei Song"
editor: visual
toc: true
toc-depth: 2
number-sections: false
toc-location: left
output: 
  html:
      theme: journal
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

# Load packages
# remotes::install_github(repo = "floswald/GAEZr")
library(sf)
library(here)
library(dplyr)
library(stringr)
library(terra)
library(ggplot2)
library(ggfx)
library(ggpubr)
library(colorspace)
library(tidyterra)
library(rnaturalearth)
library(stars)
library(tidyr)
select <- dplyr::select

# Set paths
lc_dir <- here("data/landcover")
bio_dir <- here("data/biodiversity")
result_dir <- here("results")
optimal_dir <- file.path(result_dir, "optimal")
trdeoff_dir <- here("data/tradeoff")
```

## Figure 1

Figure 1 is the study area map. It includes distribution of major land cover types, protected areas, and location of the country within Africa.

```{r}
sf_use_s2(FALSE)
# Study area
bry <- read_sf(here("data/geoms/mainland_tanzania.geojson")) %>% 
    select() %>% mutate(name = "Tanzania")

# Habitats
## Read palette
color_table <- readLines(
    file.path(lc_dir, "lc_legend_8classes.qml"))
color_table <- color_table[str_detect(color_table, "paletteEntry")]
color_table <- do.call(rbind, lapply(color_table, function(line){
    line <- gsub("<paletteEntry ", "", line)
    items <- strsplit(line, '\" ')[[1]]
    label <- items[str_detect(items, "label")]
    label <- gsub('        label=\"','', label)
    color <- items[str_detect(items, "color")]
    color <- gsub('[^[:alnum:] ]|color','', color)
    color <- paste0("#", color)
    value <- items[str_detect(items, "value")]
    value <- as.numeric(gsub('[^[:alnum:] ]|value','', value))
    data.frame(value = value, color = color, label = label)
}))

landcover <- rast(file.path(lc_dir, "landcover_tz_1km.tif")) %>%
    project("epsg:4326", method = "near") %>% 
    crop(bry) %>% mask(bry)
names(landcover) <- "landcover"

# Convert map to factors
cls <- data.frame(id = color_table$value, 
                  landcover = color_table$label)
levels(landcover) <- cls

coltab(landcover) <- data.frame(
    value = color_table$value, col = color_table$color)
landcover <- st_as_stars(landcover)

# Protected areas
pas <- read_sf(
    file.path("data/protected_area", "WDPA_WDOECM_Jan2023_Public_TZA",
              "WDPA_WDOECM_Jan2023_Public_TZA.gdb"),
    layer = "WDPA_WDOECM_poly_Jan2023_TZA")
pas <- pas %>% 
    select(WDPAID, NAME, DESIG) %>% 
    rename(Geometry = SHAPE) %>% 
    filter(!DESIG %in% c("Marine Reserve", "Marine Park"))
pas <- pas %>% 
    slice(unique(unlist(st_intersects(bry, pas))))
pas <- rasterize(pas, habitats) %>% 
    as.polygons() %>% st_as_sf()

# Make the figure
## Overview
countries <- ne_countries(
    type = 'countries', scale = 'large',
    continent = "Africa", returnclass = 'sf')
east_africa <- read_sf(file.path("data/geoms/east_africa.sqlite"))

# Make overview
overview <- ggplotGrob(ggplot() +
    geom_sf(data = countries, fill = "lightgrey", 
            color = 'black', linewidth = 0.3) +
    with_shadow(
        geom_sf(data = east_africa, fill = 'orange', 
                color = 'black', linewidth = 0.3),
        sigma = 1, x_offset = 10, y_offset = 10) +
    geom_sf(data = bry, fill = 'blue', 
            color = 'black', linewidth = 0.3) +
    coord_sf(xlim = c(-17.892, 51.892), 
             ylim = c(-35.321, 37.715)) +
    theme_transparent() +
    theme(axis.title = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank(),
          panel.grid.major = element_blank(),
          plot.margin = unit(rep(-0.6, 4), "cm")))

## Main figure
ggplot() +
    geom_stars(data = landcover, na.action = na.omit) +
    scale_fill_manual(
        "Major land cover types", values = color_table$color,
        guide = guide_legend(
            override.aes = list(linetype = "blank", 
                                shape = NA),
            nrow = 3, title.position = "top", 
            order = 1, title.hjust = 0.5)) +
    geom_sf(data = pas, aes(color = "Protected areas"), 
            fill = "transparent", linewidth = 0.4) +
    geom_sf(data = bry, aes(color = "Mainland Tanzania"), 
            fill = "transparent", linewidth = 0.6) +
    scale_color_manual(
        NULL, values = c("gray40", "black"),
        breaks = c("Mainland Tanzania", 'Protected areas'),
        guide = guide_legend(order = 2)) +
    annotation_custom(grob = overview, 
                      xmin = 37.2, xmax = 40.1,
                      ymin = - 3.8, ymax = -1.4) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 10),
          legend.text = element_text(size = 10),
          legend.spacing.y = unit(0.1, 'cm'),
          legend.margin = margin(rep(0, 4)), 
          legend.key.height = unit(0.4, 'cm'),
          legend.key.width = unit(0.4, 'cm'),
          plot.margin = unit(c(0, -2, 0, -2), "cm"),
          legend.position = "bottom",
          legend.box.just = "left",
          legend.box = "vertical")

ggsave(file.path("docs/figures_yield", "figure1.png"),
       bg = "white",
       width = 3.5, height = 4.5, dpi = 500)
```

## Table 1

Agricultural and ecological statistics inside and outside of protected areas (PAs) in Tanzania.

```{r}
# Freshly read the layers
ecological_costs <- rast(file.path(result_dir, "tradeoff_inputs_60.tif"))
ecological_costs <- subset(ecological_costs, 1:3)

# carbon density
carbon_density <- rast("data/carbon/carbon_density.tif")
carbon_density <- resample(carbon_density, ecological_costs) %>% 
    crop(bry) %>% mask(bry)
ecological_costs$carbon_cost <- carbon_density

crop_extent <- rast(file.path(lc_dir, "plant_area_tz.tif"))
crop_extent[is.na(crop_extent)] <- 0
crop_extent <- crop_extent %>% crop(bry) %>% mask(bry)

# PAs layer
pas <- rast(file.path(result_dir, "pas_mask.tif"))
pas[is.na(pas)] <- 0
pas <- pas %>% crop(bry) %>% mask(bry)

# Summarize
smr <- c(pas, crop_extent, ecological_costs)
smr <- values(smr) %>% as_tibble() %>% na.omit() %>% 
    mutate(plant_area = plant_area * 100)
names(smr) <- c("pa", "Plant area (ha)", "Biodiversity cost", 
                "Carbon cost", "Elephant conservation cost")
smr_sum <- smr %>% group_by(pa) %>% 
    summarise_all("sum")
smr_overall <- smr %>% group_by(pa) %>% 
    summarise_all(list(mean = mean, sd = sd))
smr_overall[, 2] <- smr_sum[, 2]
write.csv(smr_overall, file.path(result_dir, "table1_summary_pa.csv"),
          row.names = FALSE)
```

## Figure 2

Attainable food crop production in the near future (a) and decision-making factors in land allocation: production gain (b), biodiversity cost (c), carbon cost (d), elephant conservation cost (e), and travel time (f).

```{r}
# Use 60% scenario
tradeoff_inputs <- rast(file.path(result_dir, "tradeoff_inputs_60.tif"))

pas <- rast(file.path(result_dir, "pas_mask.tif")) %>% 
    crop(bry) %>% mask(bry)
tradeoff_inputs <- terra::mask(tradeoff_inputs, pas, inverse = TRUE)
pas <- st_as_stars(pas) %>% 
    mutate(layer = ifelse(is.nan(layer), NA, layer)) %>% 
    mutate(layer = factor(layer))
names(pas) <- "Protected areas"

# Waters and settlements
ancillary <- rast(file.path(result_dir, "water_wet_settlement.tif")) %>% 
    crop(bry) %>% mask(bry)
names(ancillary) <- "landcover"
cls <- data.frame(id = c(1, 2), 
                  landcover = c("Wetlands and waterbodies", "Builtup"))
levels(ancillary) <- cls

coltab(ancillary) <- data.frame(
    value = c(1, 2), col = c("#002de1", "black"))
ancillary <- st_as_stars(ancillary)

nm_tab <- data.frame(
    lyr_name = c("potential_yield", "travel_time",
                 "biodiversity_cost", "carbon_cost", 
                 "elephant_cons_index"),
    show_name = c("Attainable yield (t/ha)", "Travel time (mins)",
                  "Proactive biodiversity index (0-1)", "Carbon density (t/ha)", 
                  "Elephant migration index (0-1)"))

fig_list <- lapply(1:nrow(nm_tab), function(n){
    lyr_nm <- nm_tab[n, "lyr_name"]
    lyr <- tradeoff_inputs[[lyr_nm]]
    names(lyr) <- nm_tab[n, "show_name"]
    
    ggplot() +
        geom_spatraster(data = lyr, na.rm = TRUE) +
        scale_fill_continuous_sequential(
            name = nm_tab[n, "show_name"],
            palette = "Plasma", na.value = NA,
            guide = guide_colourbar(
                title.position = "top", title.hjust = 0.5)) +
        ggnewscale::new_scale_fill() +
        geom_stars(data = pas, na.action = na.omit, 
                   show.legend = FALSE) +
        scale_fill_manual(values = "grey", na.value = NA) +
        ggnewscale::new_scale_fill() +
        geom_stars(data = ancillary, na.action = na.omit, 
                   show.legend = FALSE) +
        scale_fill_manual(
            values = c("#002de1", "black"), na.value = NA) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(rep(0, 4)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(1, 'cm'),
              plot.margin = unit(c(0, 0, 0, 0), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")
})

# Make a legend
r_df <- data.frame(x = 1:3, 
                   y = 1:3,
                   rst = as.factor(1:3))
legend_lc <- ggplot() + 
    geom_raster(
        data = r_df, 
        aes(x = x, y = y, 
            fill = rst)) +
    scale_fill_manual(
        '',
        values = c("grey", "#002de1", "black"), 
        breaks = 1:3,
        labels = c("Protected areas", 
                   "Wetlands and waterbodies", "Builtup")) +
    theme_void() +
    theme(legend.position = 'bottom',
          text = element_text(size = 12),
          legend.text = element_text(size = 12),
          plot.margin = unit(rep(-1, 4),"cm"))+
    guides(fill = guide_legend(ncol = 3))
legend_lc <- get_legend(legend_lc)

fg <- ggarrange(
    plotlist = fig_list, nrow = 2, ncol = 3,
    labels = letters[1:6], font.label = list(size = 12))
ggarrange(fg, legend_lc, nrow = 2, heights = c(6, 0.2))

ggsave(file.path("docs/figures", "figure2.png"),
       bg = "white",
       width = 7.5, height = 6.4, dpi = 500)
```

## Figure 3

Reallocated agricultural areas and ecological costs under different solutions: (a) only considering agricultural potentials (production gain and travel time), (b) considering both agricultural potentials and ecological costs (biodiversity cost and carbon cost), and (c) considering agricultural potentials, ecological costs (biodiversity cost, carbon cost, and elephant conservation cost). Attainable food crop production is evaluated with the assumption that 60% of each planning unit (1 km) can be cultivated.

```{r}
library(RColorBrewer)

fnames <- list.files(
    file.path(result_dir),
    pattern = "fut", full.names = TRUE)
fnames <- fnames[str_detect(fnames, "60")]
fnames <- fnames[!str_detect(fnames, "half")]
fnames <- rev(fnames)

# Generate a sequence of 3 colors from the Dark2 palette
colors <- brewer.pal(3, "Dark2")

# Make the figure list
fg4_list <- lapply(1:length(fnames), function(n){
    fname <- fnames[n]
    lyr <- rast(fname)
    
    cls <- data.frame(
        id = 1, landcover = "Cropland")
    levels(lyr) <- cls
    
    ggplot() +
        geom_spatraster(data = lyr, na.rm = TRUE) +
        scale_fill_manual(values = colors[n], na.value = NA) +
        ggnewscale::new_scale_fill() +
        geom_stars(data = pas, na.action = na.omit, 
                   show.legend = FALSE) +
        scale_fill_manual(values = "grey", na.value = NA) +
        ggnewscale::new_scale_fill() +
        geom_stars(data = ancillary, na.action = na.omit, 
                   show.legend = FALSE) +
        scale_fill_manual(
            values = c("#002de1", "black"), na.value = NA) +
        geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
        coord_sf() + theme_void() +
        theme(text = element_text(size = 12),
              legend.position = "none",
              legend.key.width = unit(1, 'cm'),
              plot.margin = unit(c(0, 0, 0, 0), "cm"))
})

# Plant area
plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.6
plant_area <- reference_area - plant_area
plant_area[plant_area < 0] <- 0

ecological_costs <- rast(file.path(result_dir, "tradeoff_inputs_60.tif"))
ecological_costs <- subset(ecological_costs, 2:4)

ecological_costs_abc <- c(rast(fnames), plant_area, ecological_costs)
names(ecological_costs_abc)[1:3] <- letters[1:3]
sum_cost_abc <- values(ecological_costs_abc) %>% 
    as_tibble() %>% 
    mutate(no_units = plant_area > 59.9999, .before = 4) %>% 
    mutate(carbon_cost = carbon_cost * plant_area)
names(sum_cost_abc) <- c(
    letters[1:3], "No of undisturbed units", "Expand area (ha)", 
    "Biodiveristy cost (0-1)", "Carbon cost (T)", 
    "Elephant migration cost (0-1)")

fg4_hist_list <- lapply(names(sum_cost_abc)[4:8], function(nm){
    tbl <- sum_cost_abc %>% 
        select(all_of(c(letters[1:3], nm))) %>% 
        pivot_longer(cols = letters[1:3], names_to = "scenario") %>% 
        na.omit() %>% select(-value)
    names(tbl) <- c("value", "scenario")
    
    if (nm == "No of undisturbed units") {
        tbl_no <- tbl %>% group_by(scenario) %>% 
            summarise(value = sum(value) / 10000)
        g <- ggplot(tbl_no, 
                    aes(x = scenario, y = value, fill = scenario)) +
            ylab(expression(No~of~undisturbed~units~phantom()%*%10^{4}))
    } else if (nm == "Expand area (ha)") {
        tbl_area <- tbl %>% group_by(scenario) %>% 
            summarise(value = sum(value) / 1000000)
        g <- ggplot(tbl_area, 
                    aes(x = scenario, y = value, fill = scenario)) +
            ylab(expression(Plant~area~(ha~phantom()%*%10^{6})))
        
    } else if (nm == "Biodiveristy cost (0-1)") {
        tbl_bio <- tbl %>% group_by(scenario) %>% 
            summarise(value = sum(value) / 1000)
        g <- ggplot(tbl_bio, aes(x = scenario, y = value, fill = scenario)) +
            ylab(expression(Biodiversity~cost~phantom()%*%10^{3}))
    } else if (nm == "Elephant migration cost (0-1)") {
        tbl_ele <- tbl %>% group_by(scenario) %>% 
            summarise(value = sum(value) / 1000)
        g <- ggplot(tbl_ele, aes(x = scenario, y = value, fill = scenario)) +
            ylab(expression(Elephant~migration~cost~phantom()%*%10^{3}))
    } else if (nm == "Carbon cost (T)") {
        tbl_carbon <- tbl %>% group_by(scenario) %>% 
            summarise(value = sum(value) / 1000000)
        g <- ggplot(tbl_carbon, aes(x = scenario, y = value, fill = scenario)) +
            ylab(expression(Carbon~cost~(T~phantom()%*%10^{6})))
    }
    
    g + geom_col(color = "black") +
        scale_fill_brewer("Scenario", palette = "Dark2") +
        theme_classic() +
        scale_y_continuous(
            labels = scales::number_format(accuracy = 1)) +
        theme(text = element_text(size = 10),
              axis.text = element_text(size = 10),
              axis.title = element_text(size = 10),
              legend.text = element_text(size = 10),
              legend.position = "none",
              axis.title.x = element_blank(),
              axis.text.x = element_blank(),
              axis.ticks.x = element_blank())
})

fg <- ggarrange(
    plotlist = fg4_list, nrow = 1, ncol = 3,
    labels = letters[1:3], font.label = list(size = 12))

fg_hist <- ggarrange(
    plotlist = fg4_hist_list, nrow = 1, ncol = 5)

ggarrange(fg, legend_lc, NULL, fg_hist, nrow = 4, heights = c(3, 0.2, 0.1, 2))

ggsave(file.path("docs/figures", "figure3.png"),
       bg = "white",
       width = 7.5, height = 5, dpi = 500)
```

## Figure 4

Comparison between current cropland and newly allocated cropland and their ecological costs. This is a "land cover change" thing.

```{r}
crop_allo_80 <- rast(
    file.path(result_dir, "fut_agro_land_bcep_80.tif"))
crop_allo_80[is.na(crop_allo_80)] <- 0
crop_allo_60 <- rast(
    file.path(result_dir, "fut_agro_land_bcep_60.tif"))
crop_allo_60[is.na(crop_allo_60)] <- 0
crop_allo_60_half <- rast(
    file.path(result_dir, "fut_agro_land_bcep_60_half.tif"))
crop_allo_60_half[is.na(crop_allo_60_half)] <- 0
crop_allo_80_half <- rast(
    file.path(result_dir, "fut_agro_land_bcep_80_half.tif"))
crop_allo_80_half[is.na(crop_allo_80_half)] <- 0

crop_current <- rast(file.path(lc_dir, "plant_area_tz.tif"))
crop_current[crop_current < 0.01] <- 0
crop_current[crop_current >= 0.01] <- 1
crop_current[is.na(crop_current)] <- 0
crop_current <- crop_current %>% crop(bry) %>% mask(bry)

crop_change <- c(
    crop_current, crop_allo_80, crop_allo_60, 
    crop_allo_80_half, crop_allo_60_half) %>% 
    crop(bry) %>% mask(bry)
names(crop_change) <- c(
    "Current", "Expand_80", 
    "Expand_60", "Expand_80_half",
    "Expand_60_half")
crop_change <- st_as_stars(crop_change) %>% 
    split()

crop_change <- crop_change %>% mutate(
    change_80 = ifelse(Current == 1 & Expand_80 == 1, 1,
                    ifelse(Current == 0 & Expand_80 == 0, 2,
                           ifelse(Current == 0 & Expand_80 == 1, 4, 
                                  3))),
    change_60 = ifelse(Current == 1 & Expand_60 == 1, 1,
                    ifelse(Current == 0 & Expand_60 == 0, 2,
                           ifelse(Current == 0 & Expand_60 == 1, 4, 
                                  3))),
    change_60_half = ifelse(Current == 1 & Expand_60_half == 1, 1,
                    ifelse(Current == 0 & Expand_60_half == 0, 2,
                           ifelse(Current == 0 & Expand_60_half == 1, 4, 
                                  3))),
    change_80_half = ifelse(Current == 1 & Expand_80_half == 1, 1,
                    ifelse(Current == 0 & Expand_80_half == 0, 2,
                           ifelse(Current == 0 & Expand_80_half == 1, 4, 
                                  3)))) %>%
    mutate(change_80 = factor(
        change_80, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")),
        change_60 = factor(
        change_60, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")),
        change_60_half = factor(
        change_60_half, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")),
        change_80_half = factor(
        change_80_half, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")))

p80 <- ggplot() +
    geom_stars(data = crop_change %>% select(change_80),
               na.action = na.omit) + coord_equal() +
    scale_fill_viridis_d(
        "Cropland allocation",
        guide = guide_legend(
            title.position = "top", 
            title.hjust = 0.5, nrow = 2)) + 
    geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
    theme_void() +
    theme(text = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(c(0, 0, 0.2, 0)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.4, 'cm'),
              plot.margin = unit(rep(-0.1, 4), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")

p60 <- ggplot() +
    geom_stars(data = crop_change %>% select(change_60),
               na.action = na.omit) + coord_equal() +
    scale_fill_viridis_d(
        "Cropland allocation",
        guide = guide_legend(
            title.position = "top", 
            title.hjust = 0.5, nrow = 2)) + 
    geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
    theme_void() +
    theme(text = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(c(0, 0, 0.1, 0)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.4, 'cm'),
              plot.margin = unit(rep(-0.1, 4), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")

p60_half <- ggplot() +
    geom_stars(data = crop_change %>% select(change_60_half),
               na.action = na.omit) + coord_equal() +
    scale_fill_viridis_d(
        "Cropland allocation",
        guide = guide_legend(
            title.position = "top", 
            title.hjust = 0.5, nrow = 2)) + 
    geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
    theme_void() +
    theme(text = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(c(0, 0, 0.1, 0)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.4, 'cm'),
              plot.margin = unit(rep(-0.1, 4), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")

p80_half <- ggplot() +
    geom_stars(data = crop_change %>% select(change_80_half),
               na.action = na.omit) + coord_equal() +
    scale_fill_viridis_d(
        "Cropland allocation",
        guide = guide_legend(
            title.position = "top", 
            title.hjust = 0.5, nrow = 2)) + 
    geom_sf(data = bry, color = "black", 
                fill = "transparent", linewidth = 0.6) +
    theme_void() +
    theme(text = element_text(size = 12),
              legend.text = element_text(size = 12),
              legend.spacing.y = unit(0.1, 'cm'),
              legend.margin = margin(c(0, 0, 0.1, 0)), 
              legend.key.height = unit(0.4, 'cm'),
              legend.key.width = unit(0.4, 'cm'),
              plot.margin = unit(rep(-0.1, 4), "cm"),
              legend.position = "bottom",
              legend.box = "vertical")

ggarrange(p80, p60, p80_half, p60_half, ncol = 2, nrow = 2,
    labels = letters[1:4], font.label = list(size = 12),
    common.legend = TRUE, legend = "bottom")

ggsave(file.path("docs/figures", "figure4.png"),
       bg = "white",
       width = 5, height = 5, dpi = 500)
```

## Table 2

```{r}
# Area changes
changes_60 <- crop_change %>% select(change_60) %>% rast()
changes_80 <- crop_change %>% select(change_80) %>% rast()
changes_60_half <- crop_change %>% select(change_60_half) %>% rast()
changes_80_half <- crop_change %>% select(change_80_half) %>% rast()

plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.6
plant_area <- reference_area - plant_area
plant_area[plant_area < 0] <- 0

# 60%
areas_60 <- c(changes_60, plant_area)
names(areas_60) <- c("class", "area_current")
areas_60 <- values(areas_60) %>% data.frame() %>% 
    na.omit() %>% 
    mutate(class = factor(
        class, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")))
new_land_to_expand <- areas_60 %>% 
    filter(class == "New land to expand") %>% 
    pull(area_current) %>% sum()
cropland_to_expand <- areas_60 %>% 
    filter(class == "Expand current cropland") %>% 
    pull(area_current) %>% sum()

areas_60 <- data.frame(
    new_land_to_expand = new_land_to_expand,
    cropland_to_expand = cropland_to_expand)

# 60% with half yield gain
areas_60_half <- c(changes_60_half, plant_area)
names(areas_60_half) <- c("class", "area_current")
areas_60_half <- values(areas_60_half) %>% data.frame() %>% 
    na.omit() %>% 
    mutate(class = factor(
        class, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")))
new_land_to_expand <- areas_60_half %>% 
    filter(class == "New land to expand") %>% 
    pull(area_current) %>% sum()
cropland_to_expand <- areas_60_half %>% 
    filter(class == "Expand current cropland") %>% 
    pull(area_current) %>% sum()

areas_60_half <- data.frame(
    new_land_to_expand = new_land_to_expand,
    cropland_to_expand = cropland_to_expand)

# 80%
plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.8
plant_area <- reference_area - plant_area
plant_area[plant_area < 0] <- 0

areas_80 <- c(changes_80, plant_area)
names(areas_80) <- c("class", "area_current")
areas_80 <- values(areas_80) %>% data.frame() %>% 
    na.omit() %>% 
    mutate(class = factor(
        class, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")))
new_land_to_expand <- areas_80 %>% 
    filter(class == "New land to expand") %>% 
    pull(area_current) %>% sum()
cropland_to_expand <- areas_80 %>% 
    filter(class == "Expand current cropland") %>% 
    pull(area_current) %>% sum()
areas_80 <- data.frame(
    new_land_to_expand = new_land_to_expand,
    cropland_to_expand = cropland_to_expand)

# 60% with half yield gain
areas_80_half <- c(changes_80_half, plant_area)
names(areas_80_half) <- c("class", "area_current")
areas_80_half <- values(areas_80_half) %>% data.frame() %>% 
    na.omit() %>% 
    mutate(class = factor(
        class, levels = 1:4,
        labels = c("Expand current cropland", "Non-cropland to keep",
                   "Current cropland", "New land to expand")))
new_land_to_expand <- areas_80_half %>% 
    filter(class == "New land to expand") %>% 
    pull(area_current) %>% sum()
cropland_to_expand <- areas_80_half %>% 
    filter(class == "Expand current cropland") %>% 
    pull(area_current) %>% sum()

areas_80_half <- data.frame(
    new_land_to_expand = new_land_to_expand,
    cropland_to_expand = cropland_to_expand)

# Get areas
areas <- rbind(areas_80, areas_60, areas_80_half, areas_60_half) %>% 
    mutate(scenario = c("80%", "60%", "80%_half", "60%_half"))

## Cost calculation
# 60%
plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.6
plant_area <- reference_area - plant_area
plant_area[plant_area < 0] <- 0

costs <- rast(file.path(result_dir, "tradeoff_inputs_60.tif"))
costs <- subset(costs, c(2:4, 6))

fname <- file.path(result_dir, "fut_agro_land_bcep_60.tif")
costs_abcd <- c(rast(fname), plant_area, costs)
names(costs_abcd)[1] <- "land_alloc"
sum_cost_abc_60 <- values(costs_abcd) %>% 
    as_tibble() %>% na.omit() %>% 
    mutate(carbon_cost = carbon_cost * plant_area) %>% 
    select(-plant_area)
names(sum_cost_abc_60) <- c(
    "land_alloc", "Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60 <- data.frame(t(colSums(sum_cost_abc_60)[-1])) %>%
    as_tibble()
names(costs_60) <- c("Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60[1, 4] <- mean(sum_cost_abc_60$`Travel time (mins)`)

# 60% with half yield gain
costs <- rast(file.path(result_dir, "tradeoff_inputs_60_half.tif"))
costs <- subset(costs, c(2:4, 6))

fname <- file.path(result_dir, "fut_agro_land_bcep_60_half.tif")
costs_abcd <- c(rast(fname), plant_area, costs)
names(costs_abcd)[1] <- "land_alloc"
sum_cost_abc_60_half <- values(costs_abcd) %>% 
    as_tibble() %>% na.omit() %>% 
    mutate(carbon_cost = carbon_cost * plant_area) %>% 
    select(-plant_area)
names(sum_cost_abc_60_half) <- c(
    "land_alloc", "Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60_half <- data.frame(t(colSums(sum_cost_abc_60_half)[-1])) %>%
    as_tibble()
names(costs_60_half) <- c("Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60_half[1, 4] <- mean(sum_cost_abc_60_half$`Travel time (mins)`)

# 80%
plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.8
plant_area <- reference_area - plant_area
plant_area[plant_area < 0] <- 0

costs <- rast(file.path(result_dir, "tradeoff_inputs_80.tif"))
costs <- subset(costs, c(2:4, 6))

fname <- file.path(result_dir, "fut_agro_land_bcep_80.tif")
costs_abcd <- c(rast(fname), plant_area, costs)
names(costs_abcd)[1] <- "land_alloc"
sum_cost_abc_80 <- values(costs_abcd) %>% 
    as_tibble() %>% na.omit() %>% 
    mutate(carbon_cost = carbon_cost * plant_area) %>% 
    select(-plant_area)
names(sum_cost_abc_80) <- c(
    "land_alloc", "Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_80 <- data.frame(t(colSums(sum_cost_abc_80)[-1])) %>%
    as_tibble()
names(costs_80) <- c("Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_80[1, 4] <- mean(sum_cost_abc_80$`Travel time (mins)`)

# 80% with half yield gain
costs <- rast(file.path(result_dir, "tradeoff_inputs_80_half.tif"))
costs <- subset(costs, c(2:4, 6))

fname <- file.path(result_dir, "fut_agro_land_bcep_80_half.tif")
costs_abcd <- c(rast(fname), plant_area, costs)
names(costs_abcd)[1] <- "land_alloc"
sum_cost_abc_80_half <- values(costs_abcd) %>% 
    as_tibble() %>% na.omit() %>% 
    mutate(carbon_cost = carbon_cost * plant_area) %>% 
    select(-plant_area)
names(sum_cost_abc_80_half) <- c(
    "land_alloc", "Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_80_half <- data.frame(t(colSums(sum_cost_abc_80_half)[-1])) %>%
    as_tibble()
names(costs_80_half) <- c("Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_80_half[1, 4] <- mean(sum_cost_abc_80_half$`Travel time (mins)`)

# Gather all values
vals <- cbind(areas, rbind(costs_80, costs_60, costs_80_half,
                           costs_60_half)) %>% as_tibble()
names(vals)[1:3] <- c("New land to expand (ha)", "Cropland to expand (ha)", 
                      "Scenario")
write.csv(vals, file.path(result_dir, "table2_values_scenario.csv"),
          row.names = FALSE)

# No of planning units
crop_allo_80 <- rast(
    file.path(result_dir, "fut_agro_land_bcep_80.tif"))
crop_allo_60 <- rast(
    file.path(result_dir, "fut_agro_land_bcep_60.tif"))
crop_allo_80_half <- rast(
    file.path(result_dir, "fut_agro_land_bcep_80_half.tif"))
crop_allo_60_half <- rast(
    file.path(result_dir, "fut_agro_land_bcep_60_half.tif"))
```

## Figure 5

```{r}
load(file.path(optimal_dir, "vals_balanced.rda"))
row_h <- row_h[, 4:9]
names(row_h) <- c("wB", "wC", "wE", "B", "C", "E")

load(file.path(optimal_dir, "tune_costs.rda"))
tune_costs <- tune_costs[, 4:10]
names(tune_costs) <- c("wB", "wC", "wE", "B", "C", "E", "score")
```

```{r}
library("plot3D")

# Create a scatter plot
cost_fig <- function(tune_costs){
    pal <- scales::brewer_pal(palette = "YlGnBu")(n = 9)
    par(mar = c(2, 20, 2, 0))
    scatter3D(tune_costs$B, tune_costs$C, tune_costs$E, 
              colvar = tune_costs$score, ticktype = "detailed",
              theta = 60, phi = 20, 
              pch = 20, cex = 8, 
              col = ramp.col (col = pal, n = 100, alpha = 1), 
              # xlab = 'Bodiveristy cost (0-1)', 
              # ylab = 'Carbon cost (0-1)', 
              # zlab = 'Elephant migration cost (0-1)',
              xlab = '', 
              ylab = '', 
              zlab = '',
              clab = c("Balance score"),
              cex.lab = 10, cex.axis = 10,
              cex.main = 10, cex.sub = 10)
    # Add balanced one
    scatter3D(x = 0.386, y = 0.380, z = 0.390, 
              add = TRUE, colkey = FALSE, 
              pch = 20, cex = 20, col = "black")
    text3D(x = 0.386 + 0.1, y = 0.380 + 0.1, z = 0.390 + 0.1, 
           labels = sprintf("B: %s, C: %s, E: %s", "17%", "28%", "30%"),
           add = TRUE, colkey = FALSE,
           cex.lab = 10, cex.axis = 10,
           cex.main = 10, cex.sub = 10)
}

png(file.path("docs/figures", "figure5_1.png"), 
    width = 7.5 * 500, height = 7.5 * 500, units = "px")
cost_fig(tune_costs)
dev.off()

# Plot together with the land allocation figure
fname <- file.path(result_dir, "fut_agro_land_bcep_balance.tif")
lyr <- rast(fname)

cls <- data.frame(
    id = 1, landcover = "Cropland")
levels(lyr) <- cls

# Make a legend
r_df <- data.frame(x = 1:4, 
                   y = 1:4,
                   rst = as.factor(1:4))
legend_lc <- ggplot() + 
    geom_raster(
        data = r_df, 
        aes(x = x, y = y, 
            fill = rst)) +
    scale_fill_manual(
        '',
        values = c("orange", "grey", "#002de1", "black"), 
        breaks = 1:4,
        labels = c("New allocated cropland",
                   "Protected areas", 
                   "Wetlands and waterbodies", "Builtup")) +
    theme_void() +
    theme(legend.position = 'bottom',
          text = element_text(size = 12),
          legend.text = element_text(size = 12),
          plot.margin = unit(rep(-1, 4),"cm"))+
    guides(fill = guide_legend(ncol = 1))
legend_lc <- get_legend(legend_lc)

fg <- ggplot() +
    geom_spatraster(data = lyr, na.rm = TRUE) +
    scale_fill_manual(values = "orange", na.value = NA) +
    ggnewscale::new_scale_fill() +
    geom_stars(data = pas, na.action = na.omit, 
               show.legend = FALSE) +
    scale_fill_manual(values = "grey", na.value = NA) +
    ggnewscale::new_scale_fill() +
    geom_stars(data = ancillary, na.action = na.omit, 
               show.legend = FALSE) +
    scale_fill_manual(
        values = c("#002de1", "black"), na.value = NA) +
    geom_sf(data = bry, color = "black", 
            fill = "transparent", linewidth = 0.6) +
    coord_sf() + theme_void() +
    theme(text = element_text(size = 12),
          legend.position = "none",
          legend.key.width = unit(1, 'cm'),
          plot.margin = unit(c(0, 0, 0, 0), "cm"))

ggarrange(fg, legend_lc, NA, nrow = 3, heights = c(6, 1, 0.8))

ggsave(file.path("docs/figures", "figure5_2.png"),
       bg = "white",
       width = 4.5, height = 6, dpi = 500)
```

Calculate the costs and areas

```{r}
# Cost
costs <- rast(file.path(result_dir, "tradeoff_inputs_60.tif"))
costs <- subset(costs, c(2:4, 6))

fname <- file.path(result_dir, "fut_agro_land_bcep_balance.tif")
costs_abcd <- c(rast(fname), plant_area, costs)
names(costs_abcd)[1] <- "land_alloc"
sum_cost_abc_60 <- values(costs_abcd) %>% 
    as_tibble() %>% na.omit() %>% 
    mutate(carbon_cost = carbon_cost * plant_area) %>% 
    select(-plant_area)
names(sum_cost_abc_60) <- c(
    "land_alloc", "Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60 <- data.frame(t(colSums(sum_cost_sabc_60)[-1])) %>%
    as_tibble()
names(costs_60) <- c("Biodiveristy cost (0-1)", 
    "Carbon cost (T)", "Elephant migration cost (0-1)", 
    "Travel time (mins)")
costs_60[1, 4] <- mean(sum_cost_abc_60$`Travel time (mins)`)
costs_60$`Biodiveristy cost (0-1)` / 1000
costs_60$`Carbon cost (T)` / 1000000
costs_60$`Elephant migration cost (0-1)` / 1000
costs_60$`Travel time (mins)` / 60

# Area
plant_area <- rast(file.path(lc_dir, "plant_area_tz.tif"))
plant_area[is.na(plant_area)] <- 0
plant_area <- plant_area %>% crop(bry) %>% mask(bry)
plant_area <- plant_area * 100
reference_area <- plant_area
values(reference_area) <- 100 * 0.6
plant_area <-reference_area - plant_area
plant_area[plant_area < 0] <- 0

plant_area_abc <- c(rast(fname), plant_area)
plant_area_abc <- values(plant_area_abc) %>% na.omit() %>% data.frame()
sum(plant_area_abc$plant_area) / 1000000

rast(fname) %>% values() %>% na.omit() %>% length()
```
